openapi: 3.0.3
info:
  title: 青羽 Document API
  description: 青羽项目文档管理系统API接口规范
  version: 1.0.0
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.qingyu.com/api/v1
    description: 生产环境
  - url: https://dev-api.qingyu.com/api/v1
    description: 开发环境
  - url: http://localhost:8080/api/v1
    description: 本地开发环境

security:
  - BearerAuth: []

paths:
  # 项目管理
  /projects:
    get:
      tags:
        - Projects
      summary: 获取项目列表
      description: 获取用户的项目列表，支持分页和搜索
      parameters:
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: 每页数量
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          description: 项目状态过滤
          schema:
            type: string
            enum: [public, private]
        - name: search
          in: query
          description: 搜索关键词
          schema:
            type: string
      responses:
        '200':
          description: 成功获取项目列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    
    post:
      tags:
        - Projects
      summary: 创建项目
      description: 创建新的文档项目
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectRequest'
      responses:
        '201':
          description: 项目创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /projects/{projectId}:
    get:
      tags:
        - Projects
      summary: 获取项目详情
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: 成功获取项目详情
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    
    put:
      tags:
        - Projects
      summary: 更新项目
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProjectRequest'
      responses:
        '200':
          description: 项目更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      tags:
        - Projects
      summary: 删除项目
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: 项目删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  # 节点管理
  /projects/{projectId}/nodes:
    get:
      tags:
        - Nodes
      summary: 获取项目结构树
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - name: type
          in: query
          description: 返回类型
          schema:
            type: string
            enum: [tree, list]
            default: tree
      responses:
        '200':
          description: 成功获取项目结构
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeListResponse'
    
    post:
      tags:
        - Nodes
      summary: 创建节点
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNodeRequest'
      responses:
        '201':
          description: 节点创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'

  /projects/{projectId}/nodes/{nodeId}:
    put:
      tags:
        - Nodes
      summary: 更新节点
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/NodeId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNodeRequest'
      responses:
        '200':
          description: 节点更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeResponse'
    
    delete:
      tags:
        - Nodes
      summary: 删除节点
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/NodeId'
      responses:
        '200':
          description: 节点删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'

  # 文档管理
  /projects/{projectId}/documents:
    get:
      tags:
        - Documents
      summary: 获取文档列表
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - name: search
          in: query
          description: 搜索关键词
          schema:
            type: string
      responses:
        '200':
          description: 成功获取文档列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListResponse'
    
    post:
      tags:
        - Documents
      summary: 创建文档
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
      responses:
        '201':
          description: 文档创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'

  /projects/{projectId}/documents/{documentId}:
    get:
      tags:
        - Documents
      summary: 获取文档详情
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/DocumentId'
      responses:
        '200':
          description: 成功获取文档详情
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
    
    put:
      tags:
        - Documents
      summary: 更新文档
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/DocumentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocumentRequest'
      responses:
        '200':
          description: 文档更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '409':
          $ref: '#/components/responses/Conflict'
    
    delete:
      tags:
        - Documents
      summary: 删除文档
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/DocumentId'
      responses:
        '200':
          description: 文档删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'

  # 版本控制
  /projects/{projectId}/nodes/{nodeId}/versions:
    get:
      tags:
        - Versions
      summary: 获取版本历史
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/NodeId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        '200':
          description: 成功获取版本历史
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionListResponse'
    
    post:
      tags:
        - Versions
      summary: 创建版本
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/NodeId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVersionRequest'
      responses:
        '201':
          description: 版本创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'
        '409':
          $ref: '#/components/responses/Conflict'

  /projects/{projectId}/nodes/{nodeId}/rollback:
    post:
      tags:
        - Versions
      summary: 版本回滚
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/NodeId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RollbackRequest'
      responses:
        '200':
          description: 回滚成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionResponse'

  # 角色管理
  /projects/{projectId}/characters:
    get:
      tags:
        - Characters
      summary: 获取角色列表
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
        - name: search
          in: query
          description: 搜索关键词
          schema:
            type: string
        - name: traits
          in: query
          description: 性格标签过滤
          schema:
            type: string
      responses:
        '200':
          description: 成功获取角色列表
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterListResponse'
    
    post:
      tags:
        - Characters
      summary: 创建角色
      parameters:
        - $ref: '#/components/parameters/ProjectId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCharacterRequest'
      responses:
        '201':
          description: 角色创建成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterResponse'

  /projects/{projectId}/characters/{characterId}:
    get:
      tags:
        - Characters
      summary: 获取角色详情
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/CharacterId'
      responses:
        '200':
          description: 成功获取角色详情
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterResponse'
    
    put:
      tags:
        - Characters
      summary: 更新角色
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/CharacterId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCharacterRequest'
      responses:
        '200':
          description: 角色更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CharacterResponse'
    
    delete:
      tags:
        - Characters
      summary: 删除角色
      parameters:
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/CharacterId'
      responses:
        '200':
          description: 角色删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    ProjectId:
      name: projectId
      in: path
      required: true
      description: 项目ID
      schema:
        type: string
    
    NodeId:
      name: nodeId
      in: path
      required: true
      description: 节点ID
      schema:
        type: string
    
    DocumentId:
      name: documentId
      in: path
      required: true
      description: 文档ID
      schema:
        type: string
    
    CharacterId:
      name: characterId
      in: path
      required: true
      description: 角色ID
      schema:
        type: string
    
    Page:
      name: page
      in: query
      description: 页码
      schema:
        type: integer
        minimum: 1
        default: 1
    
    PageSize:
      name: page_size
      in: query
      description: 每页数量
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

  schemas:
    # 基础响应结构
    BaseResponse:
      type: object
      properties:
        code:
          type: integer
          description: 响应状态码
        message:
          type: string
          description: 响应消息
        timestamp:
          type: string
          format: date-time
          description: 响应时间戳
        request_id:
          type: string
          description: 请求ID
      required:
        - code
        - message
        - timestamp
        - request_id

    # 分页信息
    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: 当前页码
        page_size:
          type: integer
          description: 每页数量
        total:
          type: integer
          description: 总记录数
        total_pages:
          type: integer
          description: 总页数
      required:
        - page
        - page_size
        - total
        - total_pages

    # 项目相关
    Project:
      type: object
      properties:
        id:
          type: string
          description: 项目ID
        ownerId:
          type: string
          description: 所有者ID
        name:
          type: string
          description: 项目名称
        status:
          type: string
          enum: [public, private]
          description: 项目状态
        description:
          type: string
          description: 项目描述
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          description: 更新时间
      required:
        - id
        - ownerId
        - name
        - status
        - createdAt
        - updatedAt

    CreateProjectRequest:
      type: object
      properties:
        name:
          type: string
          description: 项目名称
          minLength: 1
          maxLength: 100
        status:
          type: string
          enum: [public, private]
          description: 项目状态
          default: private
        description:
          type: string
          description: 项目描述
          maxLength: 500
      required:
        - name

    UpdateProjectRequest:
      type: object
      properties:
        name:
          type: string
          description: 项目名称
          minLength: 1
          maxLength: 100
        status:
          type: string
          enum: [public, private]
          description: 项目状态
        description:
          type: string
          description: 项目描述
          maxLength: 500

    ProjectResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Project'

    ProjectListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Project'
                pagination:
                  $ref: '#/components/schemas/Pagination'

    # 节点相关
    Node:
      type: object
      properties:
        id:
          type: string
          description: 节点ID
        projectId:
          type: string
          description: 项目ID
        parentId:
          type: string
          nullable: true
          description: 父节点ID
        type:
          type: string
          enum: [folder, file]
          description: 节点类型
        name:
          type: string
          description: 节点名称
        slug:
          type: string
          description: URL友好名称
        relativePath:
          type: string
          description: 相对路径
        order:
          type: integer
          description: 排序
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          description: 更新时间
        children:
          type: array
          items:
            $ref: '#/components/schemas/Node'
          description: 子节点（仅树形结构时返回）
      required:
        - id
        - projectId
        - type
        - name
        - relativePath
        - order
        - createdAt
        - updatedAt

    CreateNodeRequest:
      type: object
      properties:
        parentId:
          type: string
          nullable: true
          description: 父节点ID
        type:
          type: string
          enum: [folder, file]
          description: 节点类型
        name:
          type: string
          description: 节点名称
          minLength: 1
          maxLength: 100
        order:
          type: integer
          description: 排序
          minimum: 0
      required:
        - type
        - name

    UpdateNodeRequest:
      type: object
      properties:
        name:
          type: string
          description: 节点名称
          minLength: 1
          maxLength: 100
        order:
          type: integer
          description: 排序
          minimum: 0

    NodeResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Node'

    NodeListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Node'

    # 文档相关
    Document:
      type: object
      properties:
        id:
          type: string
          description: 文档ID
        projectId:
          type: string
          description: 项目ID
        nodeId:
          type: string
          description: 节点ID
        title:
          type: string
          description: 文档标题
        content:
          type: string
          description: 文档内容
        format:
          type: string
          enum: [markdown, txt, json]
          description: 文档格式
        words:
          type: integer
          description: 字数统计
        version:
          type: integer
          description: 版本号
        aiContext:
          type: string
          description: AI上下文
        plotThreads:
          type: array
          items:
            type: string
          description: 剧情线程
        keyPoints:
          type: array
          items:
            type: string
          description: 关键点
        writingHints:
          type: string
          description: 写作提示
        characterIds:
          type: array
          items:
            type: string
          description: 角色ID列表
        locationIds:
          type: array
          items:
            type: string
          description: 地点ID列表
        timelineIds:
          type: array
          items:
            type: string
          description: 时间线ID列表
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          description: 更新时间
      required:
        - id
        - title
        - content
        - format
        - words
        - version
        - createdAt
        - updatedAt

    CreateDocumentRequest:
      type: object
      properties:
        nodeId:
          type: string
          description: 节点ID
        title:
          type: string
          description: 文档标题
          minLength: 1
          maxLength: 200
        content:
          type: string
          description: 文档内容
        format:
          type: string
          enum: [markdown, txt, json]
          description: 文档格式
          default: markdown
        aiContext:
          type: string
          description: AI上下文
        plotThreads:
          type: array
          items:
            type: string
          description: 剧情线程
        keyPoints:
          type: array
          items:
            type: string
          description: 关键点
        writingHints:
          type: string
          description: 写作提示
        characterIds:
          type: array
          items:
            type: string
          description: 角色ID列表
        locationIds:
          type: array
          items:
            type: string
          description: 地点ID列表
        timelineIds:
          type: array
          items:
            type: string
          description: 时间线ID列表
      required:
        - nodeId
        - title
        - content

    UpdateDocumentRequest:
      type: object
      properties:
        title:
          type: string
          description: 文档标题
          minLength: 1
          maxLength: 200
        content:
          type: string
          description: 文档内容
        expectedVersion:
          type: integer
          description: 期望版本号（乐观锁）
        aiContext:
          type: string
          description: AI上下文
        plotThreads:
          type: array
          items:
            type: string
          description: 剧情线程
        keyPoints:
          type: array
          items:
            type: string
          description: 关键点
        writingHints:
          type: string
          description: 写作提示
        characterIds:
          type: array
          items:
            type: string
          description: 角色ID列表
        locationIds:
          type: array
          items:
            type: string
          description: 地点ID列表
        timelineIds:
          type: array
          items:
            type: string
          description: 时间线ID列表

    DocumentResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Document'

    DocumentListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Document'
                pagination:
                  $ref: '#/components/schemas/Pagination'

    # 版本相关
    FileRevision:
      type: object
      properties:
        id:
          type: string
          description: 修订ID
        projectId:
          type: string
          description: 项目ID
        nodeId:
          type: string
          description: 节点ID
        commitId:
          type: string
          description: 提交ID
        version:
          type: integer
          description: 版本号
        authorId:
          type: string
          description: 作者ID
        message:
          type: string
          description: 提交消息
        parentVersion:
          type: integer
          description: 父版本号
        createdAt:
          type: string
          format: date-time
          description: 创建时间
      required:
        - id
        - nodeId
        - version
        - authorId
        - parentVersion
        - createdAt

    CreateVersionRequest:
      type: object
      properties:
        authorId:
          type: string
          description: 作者ID
        message:
          type: string
          description: 提交消息
        content:
          type: string
          description: 文档内容
        expectedVersion:
          type: integer
          description: 期望版本号
      required:
        - authorId
        - content

    RollbackRequest:
      type: object
      properties:
        authorId:
          type: string
          description: 作者ID
        version:
          type: integer
          description: 目标版本号
        message:
          type: string
          description: 回滚消息
      required:
        - authorId
        - version

    VersionResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/FileRevision'

    VersionListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/FileRevision'
                pagination:
                  $ref: '#/components/schemas/Pagination'

    # 角色相关
    Character:
      type: object
      properties:
        id:
          type: string
          description: 角色ID
        projectId:
          type: string
          description: 项目ID
        name:
          type: string
          description: 角色名称
        alias:
          type: array
          items:
            type: string
          description: 别名
        summary:
          type: string
          description: 角色简介
        traits:
          type: array
          items:
            type: string
          description: 性格标签
        background:
          type: string
          description: 背景故事
        avatarUrl:
          type: string
          description: 头像URL
        personalityPrompt:
          type: string
          description: 性格提示
        speechPattern:
          type: string
          description: 语言模式
        currentState:
          type: string
          description: 当前状态
        createdAt:
          type: string
          format: date-time
          description: 创建时间
        updatedAt:
          type: string
          format: date-time
          description: 更新时间
      required:
        - id
        - projectId
        - name
        - createdAt
        - updatedAt

    CreateCharacterRequest:
      type: object
      properties:
        name:
          type: string
          description: 角色名称
          minLength: 1
          maxLength: 50
        alias:
          type: array
          items:
            type: string
          description: 别名
        summary:
          type: string
          description: 角色简介
          maxLength: 500
        traits:
          type: array
          items:
            type: string
          description: 性格标签
        background:
          type: string
          description: 背景故事
        avatarUrl:
          type: string
          description: 头像URL
        personalityPrompt:
          type: string
          description: 性格提示
        speechPattern:
          type: string
          description: 语言模式
        currentState:
          type: string
          description: 当前状态
      required:
        - name

    UpdateCharacterRequest:
      type: object
      properties:
        name:
          type: string
          description: 角色名称
          minLength: 1
          maxLength: 50
        alias:
          type: array
          items:
            type: string
          description: 别名
        summary:
          type: string
          description: 角色简介
          maxLength: 500
        traits:
          type: array
          items:
            type: string
          description: 性格标签
        background:
          type: string
          description: 背景故事
        avatarUrl:
          type: string
          description: 头像URL
        personalityPrompt:
          type: string
          description: 性格提示
        speechPattern:
          type: string
          description: 语言模式
        currentState:
          type: string
          description: 当前状态

    CharacterResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Character'

    CharacterListResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Character'
                pagination:
                  $ref: '#/components/schemas/Pagination'

    # 通用响应
    DeleteResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                deleted:
                  type: boolean
                  description: 是否删除成功

    # 错误响应
    ErrorDetail:
      type: object
      properties:
        field:
          type: string
          description: 错误字段
        message:
          type: string
          description: 错误消息
      required:
        - field
        - message

    ErrorResponse:
      allOf:
        - $ref: '#/components/schemas/BaseResponse'
        - type: object
          properties:
            error:
              type: object
              properties:
                type:
                  type: string
                  description: 错误类型
                details:
                  type: array
                  items:
                    $ref: '#/components/schemas/ErrorDetail'
                  description: 错误详情

  responses:
    BadRequest:
      description: 请求参数错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 400
            message: "请求参数错误"
            error:
              type: "validation_error"
              details:
                - field: "name"
                  message: "名称不能为空"
            timestamp: "2024-01-01T00:00:00Z"
            request_id: "req_123456"

    Unauthorized:
      description: 未认证
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 401
            message: "未认证"
            error:
              type: "authentication_error"
              details: []
            timestamp: "2024-01-01T00:00:00Z"
            request_id: "req_123456"

    NotFound:
      description: 资源不存在
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 404
            message: "资源不存在"
            error:
              type: "not_found_error"
              details: []
            timestamp: "2024-01-01T00:00:00Z"
            request_id: "req_123456"

    Conflict:
      description: 版本冲突
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 409
            message: "版本冲突"
            error:
              type: "version_conflict"
              details:
                - field: "version"
                  message: "当前版本为3，期望版本为1"
            timestamp: "2024-01-01T00:00:00Z"
            request_id: "req_123456"

    UnprocessableEntity:
      description: 业务逻辑错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 422
            message: "业务逻辑错误"
            error:
              type: "business_logic_error"
              details:
                - field: "name"
                  message: "项目名称已存在"
            timestamp: "2024-01-01T00:00:00Z"
            request_id: "req_123456"

    InternalServerError:
      description: 服务器内部错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            code: 500
            message: "服务器内部错误"
            error:
              type: "internal_server_error"
              details: []
            timestamp: "2024-01-01T00:00:00Z"
            request_id: "req_123456"

tags:
  - name: Projects
    description: 项目管理相关接口
  - name: Nodes
    description: 节点（目录/文件）管理相关接口
  - name: Documents
    description: 文档管理相关接口
  - name: Versions
    description: 版本控制相关接口
  - name: Characters
    description: 角色管理相关接口